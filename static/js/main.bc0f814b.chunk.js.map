{"version":3,"sources":["reactComponentLib/index.js","components/SuggestionInput/PokemonNamesFetcher.ts","components/SuggestionInput/SuggestionInputTest.tsx","ComponentInfos.tsx","components/ComponentInfo/ComponentInfo.tsx","App.tsx","serviceWorker.js","index.tsx"],"names":["SuggestionInput","_a","value","onChange","suggestions","id","placeholder","_b","useState","hasFocus","setFocus","React","createElement","Fragment","Input","event","target","onFocus","onBlur","setTimeout","Popover","placement","isOpen","undefined","length","ListGroup","map","s","ListGroupItem","onClick","tag","key","fetchPokemonNames","a","fetch","request","json","response","results","o","name","SuggestionInputTest","props","state","pokemonNames","onValueChange","bind","this","setState","lowerValue","toLowerCase","filter","v","substring","FormGroup","Label","for","Component","ComponentInfos","description","property","type","requred","default","example","title","color","Alert","Spinner","className","ComponentInfo","info","Table","striped","i","scope","App","Container","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.bc0f814b.chunk.js","sourcesContent":["/* eslint-disable */\nimport { Input, Popover, ListGroup, ListGroupItem, Alert, Spinner } from 'reactstrap';\nimport React, { useState } from 'react';\n\nvar SuggestionInput = function (_a) {\r\n    var value = _a.value, onChange = _a.onChange, suggestions = _a.suggestions, id = _a.id, placeholder = _a.placeholder;\r\n    // Only show suggestions on focus\r\n    var _b = useState(false), hasFocus = _b[0], setFocus = _b[1];\r\n    // Called when the input changed\r\n    var onInputChange = function (event) {\r\n        onChange(event.target.value);\r\n    };\r\n    // Hide suggestions on unfocus (timeout for selection)\r\n    var onBlur = function () { return setTimeout(function () { return setFocus(false); }, 30); };\r\n    return React.createElement(React.Fragment, null,\r\n        React.createElement(Input, { value: value, onChange: onInputChange, onFocus: function () { return setFocus(true); }, onBlur: onBlur, placeholder: placeholder, id: id }),\r\n        React.createElement(Popover, { placement: \"bottom\", target: id, isOpen: hasFocus && suggestions !== undefined && suggestions.length > 0 },\r\n            React.createElement(ListGroup, null, suggestions.map(function (s) {\r\n                return React.createElement(ListGroupItem, { onClick: function () { return onChange(s); }, tag: \"button\", key: s }, s);\r\n            }))));\r\n};\n\nvar LoadingAlert = function (_a) {\r\n    var title = _a.title, color = _a.color;\r\n    if (title === undefined) {\r\n        title = \"Loading...\";\r\n    }\r\n    if (color === undefined) {\r\n        color = \"primary\";\r\n    }\r\n    return React.createElement(Alert, { color: color },\r\n        React.createElement(Spinner, { color: color, className: \"mr-1\" }),\r\n        title);\r\n};\n\nexport { LoadingAlert, SuggestionInput };\n","/**\n * Loads some Pokemon Names from the PokeAPI (as Testdata)\n */\nexport default async function fetchPokemonNames() : Promise<string[]> {\n    const url = \"https://pokeapi.co/api/v2/pokemon/?limit=150\";\n    const request = await fetch(url);\n    const response = await request.json();\n\n    return response.results.map((o: any) => o.name);\n}","import React from \"react\";\n\nimport { FormGroup, Label } from \"reactstrap\";\nimport fetchPokemonNames from \"./PokemonNamesFetcher\";\nimport { SuggestionInput } from \"../../reactComponentLib\";\n\n// Fetch some example data\ninterface SuggestionInputTestStates {\n    pokemonNames: string[];\n    suggestions: string[];\n    value: string;\n}\n\nexport class SuggestionInputTest extends React.Component<{}, SuggestionInputTestStates> {\n    constructor(props: {}) {\n        super(props);\n\n        this.state = {\n            pokemonNames: [],\n            suggestions: [],\n            value: \"\"\n        };\n\n        this.onValueChange = this.onValueChange.bind(this);\n    }\n\n    async componentDidMount() {\n        this.setState({\n            pokemonNames: await fetchPokemonNames()\n        });\n    }\n\n    onValueChange(value: string) {\n        // Search for suggestions\n        const lowerValue = value.toLowerCase();\n        const suggestions = this.state.pokemonNames.filter(v => v.substring(0, lowerValue.length) === lowerValue);\n        this.setState({\n            value, suggestions\n        });\n    }\n\n    render() {\n        return <FormGroup>\n            <Label for=\"pokemonChooser\">Whats your favorite Pokemon?</Label>\n            <SuggestionInput\n                value={this.state.value}\n                onChange={this.onValueChange}\n                suggestions={this.state.suggestions}\n                id=\"pokemonChooser\"\n            />\n        </FormGroup>;\n    }\n}","import React from \"react\";\nimport { ComponentInfoDeclaration } from \"./components/ComponentInfo/ComponentInfoDeclaration\";\nimport { LoadingAlert } from \"./reactComponentLib\";\nimport { SuggestionInputTest } from \"./components/SuggestionInput/SuggestionInputTest\";\n\nexport const ComponentInfos: ComponentInfoDeclaration<any>[] = [\n    {\n        name: \"LoadingAlert\",\n        description: \"Alert with loading spinner\",\n        props: [\n            {\n                property: \"title\",\n                type: \"string\",\n                description: \"Content of the Alert\",\n                requred: false,\n                default: \"Loading...\"\n            },\n            {\n                property: \"color\",\n                type: \"string\",\n                description: \"Bootstrap color of the alert (primary, secoundary, ...)\",\n                requred: false,\n                default: \"primary\"\n            }\n        ],\n        example: <LoadingAlert />\n    }, \n    {\n        name: \"SuggestionInput\",\n        description: \"Provides a text field containing suggestions\",\n        example: <SuggestionInputTest />,\n        props: [\n            {\n                property: \"value\",\n                type: \"string\",\n                description: \"The current value of the input\",\n                requred: true\n            },\n            {\n                property: \"onChange\",\n                type: \"(value: string) => any\",\n                description: \"Is called, when the input changes (use this to fetch suggestions)\",\n                requred: true\n            },\n            {\n                property: \"suggestions\",\n                type: \"string[]\",\n                description: \"Suggestions which are shown\",\n                requred: false,\n                default: \"[]\"\n            },\n            {\n                property: \"id\",\n                type: \"string\",\n                description: \"DOM ID of the input\",\n                requred: true\n            },\n            {\n                property: \"placeholder\",\n                type: \"string\",\n                description: \"Placeholder of the Input\",\n                requred: false\n            }\n        ]\n    }\n];","import { ComponentInfoDeclaration } from \"./ComponentInfoDeclaration\";\nimport React, { FC } from \"react\";\nimport { Table } from \"reactstrap\";\n\nexport interface ComponentInfoProps {\n    info: ComponentInfoDeclaration<any>;\n}\n\nexport const ComponentInfo: FC<ComponentInfoProps> = ({\n    info\n}: ComponentInfoProps) => {\n    return <>\n        <h1>{info.name}</h1>\n        <p>{info.description}</p>\n        <h2>Properties</h2>\n        <Table striped>\n            <thead>\n                <tr>\n                    <th>Name</th>\n                    <th>Type</th>\n                    <th>Required</th>\n                    <th>Description</th>\n                </tr>\n            </thead>\n            <tbody>\n                {info.props.map(i => <tr>\n                    <th scope=\"row\">{i.property}</th>\n                    <td>{i.type}</td>\n                    <td>\n                        {i.requred ? <b>Required</b> : \"Optional\"}\n                        {i.default !== undefined && \" default = \" + i.default}\n                    </td>\n                    <td>{i.description}</td>\n                </tr>)}\n            </tbody>\n        </Table>\n        <h2>Example</h2>\n        {info.example}\n    </>;\n};","import React, { Component } from 'react';\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport { Container } from 'reactstrap';\nimport { ComponentInfos } from './ComponentInfos';\nimport { ComponentInfo } from './components/ComponentInfo/ComponentInfo';\n\nclass App extends Component {\n    render() {\n        return (\n            <Container>\n                <h1>reactstrap addons</h1>\n                {\n                    ComponentInfos.map(i => <ComponentInfo info={i} />)\n                }\n            </Container>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}